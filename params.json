{"name":"Aws-iot-dragonconnect-c","tagline":"","body":"# Introduction\r\nThe DragonConnect project demonstrates recording events originating from\r\nthe DragonBoard and managing an LED.  The events are generated by pressing\r\nthe volume up and volume down keys on the DragonBoard.  When one of the\r\nbuttons is pressed, a client application written using the Amazon IoT C SDK\r\nfor embedded platforms uses MQTT to transfer the event to an Amazon data\r\ncenter where it is stored in a DynamoDB table.\r\n\r\nThe LED is managed through the General Purpose IO (GPIO) of the DragonBoard\r\nand uses AWS IoT Device Shadows.  The LED is controlled using the same\r\napplication that recorded the volume events.\r\n\r\n# Getting Started\r\nIn order to run this demonstrations, you will need\r\n\r\n* An Amazon account\r\n* A breadboard\r\n* Wire\r\n* LED\r\n* 50 m&#x2126; resisitor\r\n\r\n## Completing the Circuit\r\n\r\n**NOTE:** Please ensure that your DragonBoard is powered off and the power\r\nsupply has been disconnected from the DragonBoard.  This is a good practice\r\nthat will help reduce the chances of an accidental short circuit that could\r\ndamage your single board computer.\r\n\r\nFollow the steps below to complete the circuit\r\n\r\n* Connect one end of the wire from the GPIO 12 (positive) position to a row (m) in the breadboard\r\n* Connect one end of the resistor in the same row as the wire from GPIO 12 (m)\r\n* Connect the other end of the resistor to to a different row (n)\r\n* Connect the anode of the LED in the same row (n)\r\n* Connect the cathode of the LED to a different row (o)\r\n* Connect the ground from the GPIO (pin 2) to the row with the LED cathode (o)\r\n\r\nYour circuit should look similar to the following\r\n\r\n![DragonBoard Manage LED Breadboard](./images/ManageLED_breadboard.png)\r\n\r\n## Configure the AWS Services\r\n\r\nThe components of DragonConnect use the Amazon services as outlined in the\r\nfollowing table\r\n\r\nComponent | Source Directory | AWS Services | Tools\r\n----------|------------------|--------------|------\r\nConfiguration | config | | JavaScript\r\nAdministration | admin | IAM, IoT, DynamoDB | Node, JavaScript\r\nWeb | ui | s3 | AWS CLI\r\nLambda | lambda | IoT, Lambda, DynamoDB | Node, JavaScript, Grunt\r\nAPI | api | API Gateway | UNIX (sed), Swagger, Java\r\n\r\nThe following steps provide an overview of the steps to configure and deploy\r\nthe DragonConnect example.  Each step may include installing the tools needed\r\nto complete it\r\n\r\n1.  Configure the Amazon deployment region and account number in the Configuration component\r\n1.  Configure the foundational elements of DragonConnect\r\n1.  Deploy the lambda functions\r\n1.  Configure and deploy the API Gateway component\r\n1.  Configure and deploy the static HTML pages\r\n1.  Create and configure a thing\r\n1.  Start the client application\r\n\r\nThe instructions assume that you are performing the steps on the DragonBoard\r\nrunning Debian / Ubuntu and that the following tools are available\r\n\r\n* Node\r\n  * Amazon Lambda currently uses nodejs v0.10.36.  This should be updated as Amazon updates its nodejs version\r\n* Java 8\r\n* Python and the AWS CLI\r\n\r\n### General Configuration\r\n\r\nThe general configuration is used by the admin and lambda modules.  Please\r\nupdate the index.js script to include the AWS deployment region and account\r\nnumber.  For example\r\n\r\n> region: 'us-east-1', <br>\r\n> accountNumber: '012345678901',\r\n\r\n### Foundational Elements\r\n\r\nThe foundational elements involve configuring the IAM and IoT services as well\r\nas creating the DynamoDB table.  The instructions assume that the working\r\ndirectory is the\r\n\r\n```sh\r\n$ cd admin\r\n$ npm install ../config\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}